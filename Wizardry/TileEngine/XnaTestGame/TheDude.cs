using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Graphics;
using Microsoft.Xna.Framework.Input;

using DebugAssist;

namespace XnaTestGame
{
	// Fake character class to test drawing players or objects 
	//   on maps generated by the tile engine.
	class TheDude : DrawableGameComponent
	{
		public static void Abide()
		{
			bool abide = true;
		}

		const int HEIGHT_THRESHOLD = 6;

		Texture2D dude;
		public Vector2 drawPosition;
		public Vector2 worldPosition;
		public int height = 0;
		int Speed = 5;
		public bool camBound = true;

		Game1 parentGame;

		public TheDude( Game1 game ) : base( game )
		{
			parentGame = game;
			drawPosition = new Vector2(298,212);
		}

		protected override void LoadContent()
		{
			dude = Game.Content.Load<Texture2D>( "dudeman" );

			worldPosition.X = drawPosition.X + ( dude.Width / 2 );
			worldPosition.Y = drawPosition.Y + dude.Height;

			// Set up some debug display info
			DbgAssistor dbg = (DbgAssistor)Game.Services.GetService( typeof( IDbgAssistor ) );

			// My position
			DbgMsg msg = () => {
				return "Char Position: (" + ((int)worldPosition.X) + ", " + ((int)worldPosition.Y) + ")";
			};
			dbg.AddDbgMsg( msg );

			// My height
			msg = () => {
				return "Char Height: " + height;
			};
			dbg.AddDbgMsg( msg );

			base.LoadContent();
		}

		public override void Update( GameTime gameTime )
		{
			Vector2 motion = Vector2.Zero;

			KeyboardState keyState = Keyboard.GetState();
			if ( keyState.IsKeyDown( Keys.I ) || keyState.IsKeyDown( Keys.W ) )
				motion.Y--;
			if ( keyState.IsKeyDown( Keys.K ) || keyState.IsKeyDown( Keys.S ) )
				motion.Y++;
			if ( keyState.IsKeyDown( Keys.L ) || keyState.IsKeyDown( Keys.D ) )
				motion.X++;
			if ( keyState.IsKeyDown( Keys.J ) || keyState.IsKeyDown( Keys.A ) )
				motion.X--;

			if ( motion != Vector2.Zero )
			{
				motion.Normalize();
			}
			
			Vector2 nextPosition = worldPosition + ( motion * Speed );
			int nextHeight = parentGame.tileMap.GetHeightAtWorldPosition( nextPosition );

			if ( nextHeight <= HEIGHT_THRESHOLD )
			{
				if ( camBound )
				{
					parentGame.camera.CenterOn( worldPosition );
				}

				worldPosition = nextPosition;
				height = nextHeight;

				drawPosition.X = worldPosition.X - ( dude.Width / 2 );
				drawPosition.Y = worldPosition.Y - dude.Height;
			}

			base.Update( gameTime );
		}

		public override void Draw( GameTime gameTime )
		{
			SpriteBatch sb = parentGame.spriteBatch;

			float drawDepth = parentGame.tileMap.GetDrawDepth( worldPosition, height );

			Vector2 actualDrawPosition = drawPosition;
			actualDrawPosition -= parentGame.camera.Position;
			actualDrawPosition.Y -= parentGame.tileMap.HalfTileSize * ( height / parentGame.tileMap.LayerHeight );

			sb.Draw(
				dude,					// Texture
				actualDrawPosition,		// Position
				null,					// Source Rectangle (null = full texture)
				Color.White,			// Tint colour
				0,						// Rotation
				Vector2.Zero,			// Origin
				1,						// Scale
				SpriteEffects.None,		// Special effect
				drawDepth				// Depth
				);

			base.Draw( gameTime );
		}

	}
}
